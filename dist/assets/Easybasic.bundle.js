!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=19)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});e.token_types=Object.freeze({Whitespace:0,Comment:1,EOL:2,Keyword:3,DeciamlNum:4,OcatalNum:5,HexaNum:6,Operator:7,UniaryOperator:14,String:8,Identifier:9,Unknown:10,EOF:11,LineNumber:12,EOS:13,Array:15,Function:16}),e.keywords=["END","FOR","NEXT","DATA","INPUT","DIM","READ","LET","GOTO","RUN","IF","RESTORE","GOSUB","RETURN","STOP","PRINT","?","CLEAR","LIST","NEW","ON","WAIT","DEF","POKE","CONT","OUT","LPRINT","LLIST","WIDTH","ELSE","TRON","TROFF","SWAP","ERASE","EDIT","ERROR","RESUME","DELETE","AUTO","RENUM","DEFSTR","DEFINT","DEFSNG","DEFDBL","LINE","WHILE","WEND","CALL","WRITE","OPTION","RANDOMIZE","OPEN","CLOSE","LOAD","MERGE","SAVE","COLOR","CLS","MOTOR","BSAVE","BLOAD","SOUND","BEEP","PSET","PRESET","SCREEN","KEY","LOCATE","TO","THEN","TAB(","STEP","USR","FN","SPC(","NOT","ERL","ERR","STRING$","USING","INSTR","VARPTR","CSRLIN","POINT","OFF","INKEY$","CVI","CVS","CVD","MKI$","MKS$","MKD$","EXTERR","FILES","FIELD","SYSTEM","NAME","LSET","RSET","KILL","PUT","GET","RESET","COMMON","CHAIN","DATE$","TIME$","PAINT","COM","CIRCLE","DRAW","PLAY","TIMER","ERDEV","IOCTL","CHDIR","MKDIR","RMDIR","SHELL","ENVIRON","VIEW","WINDOW","PMAP","PALETTE","LCOPY","CALLS","PCOPY","LOCK","UNLOCK","LEFT$","RIGHT$","MID$","SGN","INT","ABS","SQR","RND","SIN","LOG","EXP","COS","TAN","ATN","FRE","INP","POS","LEN","STR$","VAL","ASC","CHR$","PEEK","SPACE$","OCT$","HEX$","LPOS","CINT","CSNG","CDBL","FIX","PEN","STICK","STRIG","EOF","LOC","LOF","NOISE","AS","SHARED","ACCESS","RANDOM","OUTPUT","APPEND","BASE","SEG","ALL","REM","'"],e.binary_operators={"^":12,"*":11,"/":11,"\\":10,MOD:9,"+":8,"-":8,">":7,"<":7,">=":7,"<=":7,"=>":7,"=<":7,"<>":7,"><":7,"==":7,AND:5,OR:4,XOR:3,EQV:2,IMP:1},e.unary_operators=["-","+","NOT"]},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=n(0);var a=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}return r(t,[{key:"parse",value:function(t,e){return this.scanner=t,this._parseUntil(e)}},{key:"_parseUntil",value:function(t){for(var e=[],n=!1;;){if(this.scanner.peekState(),this.token=this.scanner.scan(),this.scanner.seekState(),!this.token.text||this.token.type==i.token_types.EOL||":"==this.token.text){this.token=this.scanner.scan(),n=!1;break}if(this.token.text==t){this.token=this.scanner.scan(),n=!0;break}if(e.length>0&&","!=this.token.text)throw"Unexpected token "+this.token.text;","==this.token.text&&(this.token=this.scanner.scan());var r=this._binaryParser();e.push(r)}return 1==e.length?[n,e[0],this.scanner]:[n,e,this.scanner]}},{key:"_readToken",value:function(){if(this.token=this.scanner.scan(),this.token.type==i.token_types.DeciamlNum){var t=this.token.text.replace(/(!|%|#|)$/,"")||0;return Object.assign(this.token,{value:parseFloat(t)})}if(this.token.type==i.token_types.OcatalNum){t=this.token.text.replace(/^&o?/i,"")||"0";return Object.assign(this.token,{value:this._convertFromBaseToBase(t,8,10)})}if(this.token.type==i.token_types.HexaNum){t=this.token.text.replace(/^&h/i,"")||"0";return Object.assign(this.token,{value:this._convertFromBaseToBase(t,16,10)})}if(this.token.type==i.token_types.String)return Object.assign(this.token,{value:this.token.text.substr(1).slice(0,-1)});if("["==this.token.text)return{object:this._parseUntil("]")[1],is_array:!0};if(this._isUniaryOp(this.token.text))return{type:i.token_types.UniaryOperator,operator:this.token.text,argument:this._readToken(),prefix:!0};if("("==this.token.text)return this._parseUntil(")")[1];if(this.token.type==i.token_types.Identifier){this.scanner.peekState();var e=this.token;if(this.token=this.scanner.scan(),"["==this.token.text)return{type:i.token_types.Array,object:e,property:this._parseUntil("]")[1]};if("("==this.token.text)return{type:i.token_types.Function,object:e,property:this._parseUntil(")")[1]};this.scanner.seekState(),this.token=this.scanner.token}return this.token}},{key:"_binaryPrecedence",value:function(t){return i.binary_operators[t]||0}},{key:"_readBinaryToken",value:function(){return this.scanner.peekState(),this.token=this.scanner.scan(),this.token.type==i.token_types.Operator?Object.assign(this.token,{prec:this._binaryPrecedence(this.token.text)}):(this.scanner.seekState(),!1)}},{key:"_isUniaryOp",value:function(t){return["+","-","NOT"].indexOf(t)>-1}},{key:"_binaryParser",value:function(){var t=this._readToken(),e=this._readBinaryToken();if(!e)return t;var n=this._readToken();if(!n)throw"Expected expression after "+e+", "+this.scanner.index;for(var r=[t,e,n];(e=this._readBinaryToken())&&0!=e.prec;){for(;r.length>2&&e.prec<=r[r.length-2].prec;){n=r.pop();var i=r.pop();t=r.pop();var a=this._createBinaryExpression(i,t,n);r.push(a)}if(!(a=this._readToken()))throw"Expected expression after "+e+", "+this.scanner.index;r.push(e,a)}var o=r.length-1;for(a=r[o];o>1;)a=this._createBinaryExpression(r[o-1],r[o-2],a),o-=2;return a}},{key:"_createBinaryExpression",value:function(t,e,n){return{operator:t.text,left:e,right:n,is_binary:!0}}},{key:"_convertFromBaseToBase",value:function(t,e,n){var r=parseInt(t,e);return parseInt(r.toString(n))}}]),t}();e.default=a},function(t,e,n){var r,i=n(10),a=function(t,e,n,r){return{key:t,value:e,next:n,prev:r}};r=function(){var t=this;t._dict={},t._first=null,t._last=null,t._size=0;var e=i.toArray(arguments);t._stringify=function(t){return t},"function"==typeof e[0]&&(t._stringify=e.shift()),i.each(e,function(e){t.putBefore(e[0],e[1],null)})},i.extend(r.prototype,{_k:function(t){return" "+this._stringify(t)},empty:function(){return!this._first},size:function(){return this._size},_linkEltIn:function(t){t.next?(t.prev=t.next.prev,t.next.prev=t,t.prev&&(t.prev.next=t)):(t.prev=this._last,this._last&&(this._last.next=t),this._last=t),null!==this._first&&this._first!==t.next||(this._first=t)},_linkEltOut:function(t){t.next&&(t.next.prev=t.prev),t.prev&&(t.prev.next=t.next),t===this._last&&(this._last=t.prev),t===this._first&&(this._first=t.next)},putBefore:function(t,e,n){if(this._dict[this._k(t)])throw new Error("Item "+t+" already present in OrderedDict");var r=a(t,e,n?this._dict[this._k(n)]:null);if(void 0===r.next)throw new Error("could not find item to put this one before");this._linkEltIn(r),this._dict[this._k(t)]=r,this._size++},append:function(t,e){this.putBefore(t,e,null)},remove:function(t){var e=this._dict[this._k(t)];if(void 0===e)throw new Error("Item "+t+" not present in OrderedDict");return this._linkEltOut(e),this._size--,delete this._dict[this._k(t)],e.value},get:function(t){if(this.has(t))return this._dict[this._k(t)].value},has:function(t){return i.has(this._dict,this._k(t))},forEach:function(t){for(var e=0,n=this._first;null!==n;){if(t(n.value,n.key,e)===r.BREAK)return;n=n.next,e++}},first:function(){if(!this.empty())return this._first.key},firstValue:function(){if(!this.empty())return this._first.value},last:function(){if(!this.empty())return this._last.key},lastValue:function(){if(!this.empty())return this._last.value},prev:function(t){if(this.has(t)){var e=this._dict[this._k(t)];if(e.prev)return e.prev.key}return null},next:function(t){if(this.has(t)){var e=this._dict[this._k(t)];if(e.next)return e.next.key}return null},moveBefore:function(t,e){var n=this._dict[this._k(t)],r=e?this._dict[this._k(e)]:null;if(void 0===n)throw new Error("Item to move is not present");if(void 0===r)throw new Error("Could not find element to move this one before");r!==n.next&&(this._linkEltOut(n),n.next=r,this._linkEltIn(n))},indexOf:function(t){var e=this,n=null;return e.forEach(function(i,a,o){if(e._k(a)===e._k(t))return n=o,r.BREAK}),n},_checkRep:function(){i.each(this._dict,function(t,e){if(e.next===e)throw new Error("Next is a loop");if(e.prev===e)throw new Error("Prev is a loop")})}}),r.BREAK={break:!0},t.exports=r},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}();var i=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.builtin_uniary={"+":function(t){return t},"-":function(t){return-t},NOT:function(t){return~t}},this.builtin_binary={"+":function(t,e){return t+e},"-":function(t,e){return t-e},"*":function(t,e){return t*e},"/":function(t,e){return t/e},"\\":function(t,e){return parseInt(t/e)},"^":function(t,e){return Math.pow(t,e)},"<":function(t,e){return t<e},">":function(t,e){return t>e},"==":function(t,e){return t==e},"<=":function(t,e){return t<=e},"=<":function(t,e){return t<=e},">=":function(t,e){return t>=e},"=>":function(t,e){return t>=e},"<>":function(t,e){return t!=e},AND:function(t,e){return t&&e},OR:function(t,e){return t||e},MOD:function(t,e){return t%e},XOR:function(t,e){return t^e},EQV:function(t,e){return~(t^e)},IMP:function(t,e){return~t^e}},this.uniary_dict=this.builtin_uniary,this.binary_dict=this.builtin_binary}return r(t,[{key:"clear",value:function(){this.uniary_dict=this.builtin_uniary,this.binary_dict=this.builtin_binary}},{key:"get_uniary",value:function(t){return this.uniary_dict[t]}},{key:"get_binary",value:function(t){return this.binary_dict[t]}},{key:"register_uniary",value:function(t,e){this.uniary_dict[t]=e}},{key:"register_binary",value:function(t,e){this.binary_dict[t]=e}},{key:"_getOps",value:function(){var t=Object.keys(this.uniary_dict),e=Object.keys(this.binary_dict);return t.concat(e)}},{key:"_getMaxOpLength",value:function(){var t=0;return this._getOps().map(function(e){e.length>t&&(t=e.length)}),t}},{key:"isOp",value:function(t){for(var e=this._getOps(),n=this._getMaxOpLength();n>0;n--){var r=t.slice(0,n);if(e.indexOf(r)>-1)return[n,r]}}}]),t}();e.default=i},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}();function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}e.ForStatement=function(){function t(){i(this,t)}return r(t,[{key:"execute",value:function(t,e,n){var r=t.params.ident,i=e.expr_evaluator.evaluate(t.params.start,e),a=e.expr_evaluator.evaluate(t.params.end,e),o=e.expr_evaluator.evaluate(t.params.step,e);e.var_manager.register(r,i),e.loop_man.registerLoop("for",n,{ident:r,start:i,end:a,step:o||1})}}]),t}(),e.NextStatement=function(){function t(e){i(this,t),this.terminal=e}return r(t,[{key:"execute",value:function(t,e){var n=e.loop_man.getLastLoop("for"),r=e.var_manager.get(n.params.ident)+n.params.step;if(e.var_manager.register(n.params.ident,r),r<=n.params.end)return n.index+1}}]),t}()},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}();e.LetStatement=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.type_dict={string:0,number:1,object:2}}return i(t,[{key:"execute",value:function(t,e){var n=t.params.ident,i=e.expr_evaluator.evaluate(t.params.val,e),a=this.type_dict[void 0===i?"undefined":r(i)];e.var_manager.register(n,i,a)}}]),t}()},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}();var i=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.terminal=e}return r(t,[{key:"execute",value:function(t,e){this.runtime=e;var n=t.format&&t.format.length&&t.format[0]||"",r=Array.isArray(t.params.exprs)?t.params.exprs:[t.params.exprs],i=!0,a=!1,o=void 0;try{for(var u,s=r[Symbol.iterator]();!(i=(u=s.next()).done);i=!0){var c=u.value,f=this.formateExpr(n,c,e);this.terminal.write(f+"\n")}}catch(t){a=!0,o=t}finally{try{!i&&s.return&&s.return()}finally{if(a)throw o}}}},{key:"formateExpr",value:function(t,e,n){return n.expr_evaluator.evaluate(e,n)}}]),t}();e.default=i},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=function(t){return t&&t.__esModule?t:{default:t}}(n(6)),a=n(5),o=n(4);var u=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.builtin_statements={PRINT:new i.default(e),LET:new a.LetStatement(e),FOR:new o.ForStatement(e),NEXT:new o.NextStatement(e)},this.statement_dict=this.builtin_statements}return r(t,[{key:"clear",value:function(){this.statement_dict=this.builtin_statements}},{key:"get",value:function(t){return this.statement_dict[t]}},{key:"remove",value:function(t){delete this.statement_dict[t]}},{key:"register",value:function(t,e){this.statement_dict[t]=e}},{key:"getKeywords",value:function(){return Object.keys(this.statement_dict)}}]),t}();e.default=u},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}();function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}var a=function(){function t(){i(this,t),this.loops=[]}return r(t,[{key:"registerLoop",value:function(t,e,n){this.loops.push(new function t(e,n,r){i(this,t),this.type=e,this.params=r,this.counter=0,this.index=n}(t,e,n))}},{key:"destroyLastLoop",value:function(){this.loops.pop()}},{key:"getLastLoop",value:function(t){var e=this.loops.filter(function(e){return e.type==t});return e[e.length-1]}}]),t}();e.default=a},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){return function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var n=[],r=!0,i=!1,a=void 0;try{for(var o,u=t[Symbol.iterator]();!(r=(o=u.next()).done)&&(n.push(o.value),!e||n.length!==e);r=!0);}catch(t){i=!0,a=t}finally{try{!r&&u.return&&u.return()}finally{if(i)throw a}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}();e.build_satements=function(){var t=new i.default;return t.ARC=u,t.ELLIPSE=u,t.LINE=u,t.POINT=u,t.QUAD=u,t.RECT=u,t.TRIANGLE=u,t.CIRCLE=u,t.COLOR=u,t.DRAW=u,t.PAINT=u,t.PALETTE=u,t.POINT=u,t.GET=u,t.PUT=u,t.CLS=u,t.LOCATE=u,t.PRINT=l,t["?"]=l,t.BEEP=u,t.NOISE=u,t.PLAY=u,t.INPUT=u,t.LET=s,t.DATA=u,t.READ=u,t.ERASE=o,t.SWAP=o,t.END=o,t.WEND=o,t.NEW=o,t.ELSE=o,t.ENDIF=o,t.REM=o,t["'"]=o,t.FOR=c,t.NEXT=u,t.WHILE=u,t.IF=f,t.ELIF=f,t};var i=a(n(2));a(n(1));function a(t){return t&&t.__esModule?t:{default:t}}function o(t,e){e.parse(t)}function u(t,e){return e.parse(t)[1]}function s(t,e,n){if(!n){n=t.scan().text;var r=t.scan();if("="!=r.text)throw"Invalid token "+r.text}return{ident:n,val:e.parse(t)[1]}}function c(t,e){var n=t.scan().text,i=t.scan();if("="!=i.text)throw"Invalid token "+i.text;var a=e.parse(t,"TO"),o=r(a,3),u=(o[0],o[1]);if("TO"!=(t=o[2]).last_token.text)throw"Invalid token "+i.text;var s=e.parse(t,"STEP"),c=r(s,3),f=(c[0],c[1]);if("STEP"==(t=c[2]).last_token.text){var l=e.parse(t),p=r(l,3),h=(p[0],p[1]);t=p[2]}return{ident:n,start:u,end:f,step:h}}function f(t,e){return{cond:e.parse(t)[1]}}function l(t,e){var n=e.parse(t,"USING"),r=n[0]&&e.parse(t)[1];return{exprs:n[1],format:r}}},function(t,e,n){var r;(function(){var n=this,i=n._,a={},o=Array.prototype,u=Object.prototype,s=Function.prototype,c=o.push,f=o.slice,l=o.concat,p=u.toString,h=u.hasOwnProperty,y=o.forEach,v=o.map,d=o.reduce,_=o.reduceRight,k=o.filter,m=o.every,b=o.some,g=o.indexOf,E=o.lastIndexOf,O=Array.isArray,x=Object.keys,w=s.bind,T=function(t){return t instanceof T?t:this instanceof T?void(this._wrapped=t):new T(t)};void 0!==t&&t.exports&&(e=t.exports=T),e._=T,T.VERSION="1.6.0";var S=T.each=T.forEach=function(t,e,n){if(null==t)return t;if(y&&t.forEach===y)t.forEach(e,n);else if(t.length===+t.length){for(var r=0,i=t.length;r<i;r++)if(e.call(n,t[r],r,t)===a)return}else{var o=T.keys(t);for(r=0,i=o.length;r<i;r++)if(e.call(n,t[o[r]],o[r],t)===a)return}return t};T.map=T.collect=function(t,e,n){var r=[];return null==t?r:v&&t.map===v?t.map(e,n):(S(t,function(t,i,a){r.push(e.call(n,t,i,a))}),r)};var N="Reduce of empty array with no initial value";T.reduce=T.foldl=T.inject=function(t,e,n,r){var i=arguments.length>2;if(null==t&&(t=[]),d&&t.reduce===d)return r&&(e=T.bind(e,r)),i?t.reduce(e,n):t.reduce(e);if(S(t,function(t,a,o){i?n=e.call(r,n,t,a,o):(n=t,i=!0)}),!i)throw new TypeError(N);return n},T.reduceRight=T.foldr=function(t,e,n,r){var i=arguments.length>2;if(null==t&&(t=[]),_&&t.reduceRight===_)return r&&(e=T.bind(e,r)),i?t.reduceRight(e,n):t.reduceRight(e);var a=t.length;if(a!==+a){var o=T.keys(t);a=o.length}if(S(t,function(u,s,c){s=o?o[--a]:--a,i?n=e.call(r,n,t[s],s,c):(n=t[s],i=!0)}),!i)throw new TypeError(N);return n},T.find=T.detect=function(t,e,n){var r;return I(t,function(t,i,a){if(e.call(n,t,i,a))return r=t,!0}),r},T.filter=T.select=function(t,e,n){var r=[];return null==t?r:k&&t.filter===k?t.filter(e,n):(S(t,function(t,i,a){e.call(n,t,i,a)&&r.push(t)}),r)},T.reject=function(t,e,n){return T.filter(t,function(t,r,i){return!e.call(n,t,r,i)},n)},T.every=T.all=function(t,e,n){e||(e=T.identity);var r=!0;return null==t?r:m&&t.every===m?t.every(e,n):(S(t,function(t,i,o){if(!(r=r&&e.call(n,t,i,o)))return a}),!!r)};var I=T.some=T.any=function(t,e,n){e||(e=T.identity);var r=!1;return null==t?r:b&&t.some===b?t.some(e,n):(S(t,function(t,i,o){if(r||(r=e.call(n,t,i,o)))return a}),!!r)};T.contains=T.include=function(t,e){return null!=t&&(g&&t.indexOf===g?-1!=t.indexOf(e):I(t,function(t){return t===e}))},T.invoke=function(t,e){var n=f.call(arguments,2),r=T.isFunction(e);return T.map(t,function(t){return(r?e:t[e]).apply(t,n)})},T.pluck=function(t,e){return T.map(t,T.property(e))},T.where=function(t,e){return T.filter(t,T.matches(e))},T.findWhere=function(t,e){return T.find(t,T.matches(e))},T.max=function(t,e,n){if(!e&&T.isArray(t)&&t[0]===+t[0]&&t.length<65535)return Math.max.apply(Math,t);var r=-1/0,i=-1/0;return S(t,function(t,a,o){var u=e?e.call(n,t,a,o):t;u>i&&(r=t,i=u)}),r},T.min=function(t,e,n){if(!e&&T.isArray(t)&&t[0]===+t[0]&&t.length<65535)return Math.min.apply(Math,t);var r=1/0,i=1/0;return S(t,function(t,a,o){var u=e?e.call(n,t,a,o):t;u<i&&(r=t,i=u)}),r},T.shuffle=function(t){var e,n=0,r=[];return S(t,function(t){e=T.random(n++),r[n-1]=r[e],r[e]=t}),r},T.sample=function(t,e,n){return null==e||n?(t.length!==+t.length&&(t=T.values(t)),t[T.random(t.length-1)]):T.shuffle(t).slice(0,Math.max(0,e))};var A=function(t){return null==t?T.identity:T.isFunction(t)?t:T.property(t)};T.sortBy=function(t,e,n){return e=A(e),T.pluck(T.map(t,function(t,r,i){return{value:t,index:r,criteria:e.call(n,t,r,i)}}).sort(function(t,e){var n=t.criteria,r=e.criteria;if(n!==r){if(n>r||void 0===n)return 1;if(n<r||void 0===r)return-1}return t.index-e.index}),"value")};var R=function(t){return function(e,n,r){var i={};return n=A(n),S(e,function(a,o){var u=n.call(r,a,o,e);t(i,u,a)}),i}};T.groupBy=R(function(t,e,n){T.has(t,e)?t[e].push(n):t[e]=[n]}),T.indexBy=R(function(t,e,n){t[e]=n}),T.countBy=R(function(t,e){T.has(t,e)?t[e]++:t[e]=1}),T.sortedIndex=function(t,e,n,r){for(var i=(n=A(n)).call(r,e),a=0,o=t.length;a<o;){var u=a+o>>>1;n.call(r,t[u])<i?a=u+1:o=u}return a},T.toArray=function(t){return t?T.isArray(t)?f.call(t):t.length===+t.length?T.map(t,T.identity):T.values(t):[]},T.size=function(t){return null==t?0:t.length===+t.length?t.length:T.keys(t).length},T.first=T.head=T.take=function(t,e,n){if(null!=t)return null==e||n?t[0]:e<0?[]:f.call(t,0,e)},T.initial=function(t,e,n){return f.call(t,0,t.length-(null==e||n?1:e))},T.last=function(t,e,n){if(null!=t)return null==e||n?t[t.length-1]:f.call(t,Math.max(t.length-e,0))},T.rest=T.tail=T.drop=function(t,e,n){return f.call(t,null==e||n?1:e)},T.compact=function(t){return T.filter(t,T.identity)};var M=function(t,e,n){return e&&T.every(t,T.isArray)?l.apply(n,t):(S(t,function(t){T.isArray(t)||T.isArguments(t)?e?c.apply(n,t):M(t,e,n):n.push(t)}),n)};T.flatten=function(t,e){return M(t,e,[])},T.without=function(t){return T.difference(t,f.call(arguments,1))},T.partition=function(t,e){var n=[],r=[];return S(t,function(t){(e(t)?n:r).push(t)}),[n,r]},T.uniq=T.unique=function(t,e,n,r){T.isFunction(e)&&(r=n,n=e,e=!1);var i=n?T.map(t,n,r):t,a=[],o=[];return S(i,function(n,r){(e?r&&o[o.length-1]===n:T.contains(o,n))||(o.push(n),a.push(t[r]))}),a},T.union=function(){return T.uniq(T.flatten(arguments,!0))},T.intersection=function(t){var e=f.call(arguments,1);return T.filter(T.uniq(t),function(t){return T.every(e,function(e){return T.contains(e,t)})})},T.difference=function(t){var e=l.apply(o,f.call(arguments,1));return T.filter(t,function(t){return!T.contains(e,t)})},T.zip=function(){for(var t=T.max(T.pluck(arguments,"length").concat(0)),e=new Array(t),n=0;n<t;n++)e[n]=T.pluck(arguments,""+n);return e},T.object=function(t,e){if(null==t)return{};for(var n={},r=0,i=t.length;r<i;r++)e?n[t[r]]=e[r]:n[t[r][0]]=t[r][1];return n},T.indexOf=function(t,e,n){if(null==t)return-1;var r=0,i=t.length;if(n){if("number"!=typeof n)return t[r=T.sortedIndex(t,e)]===e?r:-1;r=n<0?Math.max(0,i+n):n}if(g&&t.indexOf===g)return t.indexOf(e,n);for(;r<i;r++)if(t[r]===e)return r;return-1},T.lastIndexOf=function(t,e,n){if(null==t)return-1;var r=null!=n;if(E&&t.lastIndexOf===E)return r?t.lastIndexOf(e,n):t.lastIndexOf(e);for(var i=r?n:t.length;i--;)if(t[i]===e)return i;return-1},T.range=function(t,e,n){arguments.length<=1&&(e=t||0,t=0),n=arguments[2]||1;for(var r=Math.max(Math.ceil((e-t)/n),0),i=0,a=new Array(r);i<r;)a[i++]=t,t+=n;return a};var P=function(){};T.bind=function(t,e){var n,r;if(w&&t.bind===w)return w.apply(t,f.call(arguments,1));if(!T.isFunction(t))throw new TypeError;return n=f.call(arguments,2),r=function(){if(!(this instanceof r))return t.apply(e,n.concat(f.call(arguments)));P.prototype=t.prototype;var i=new P;P.prototype=null;var a=t.apply(i,n.concat(f.call(arguments)));return Object(a)===a?a:i}},T.partial=function(t){var e=f.call(arguments,1);return function(){for(var n=0,r=e.slice(),i=0,a=r.length;i<a;i++)r[i]===T&&(r[i]=arguments[n++]);for(;n<arguments.length;)r.push(arguments[n++]);return t.apply(this,r)}},T.bindAll=function(t){var e=f.call(arguments,1);if(0===e.length)throw new Error("bindAll must be passed function names");return S(e,function(e){t[e]=T.bind(t[e],t)}),t},T.memoize=function(t,e){var n={};return e||(e=T.identity),function(){var r=e.apply(this,arguments);return T.has(n,r)?n[r]:n[r]=t.apply(this,arguments)}},T.delay=function(t,e){var n=f.call(arguments,2);return setTimeout(function(){return t.apply(null,n)},e)},T.defer=function(t){return T.delay.apply(T,[t,1].concat(f.call(arguments,1)))},T.throttle=function(t,e,n){var r,i,a,o=null,u=0;n||(n={});var s=function(){u=!1===n.leading?0:T.now(),o=null,a=t.apply(r,i),r=i=null};return function(){var c=T.now();u||!1!==n.leading||(u=c);var f=e-(c-u);return r=this,i=arguments,f<=0?(clearTimeout(o),o=null,u=c,a=t.apply(r,i),r=i=null):o||!1===n.trailing||(o=setTimeout(s,f)),a}},T.debounce=function(t,e,n){var r,i,a,o,u,s=function(){var c=T.now()-o;c<e?r=setTimeout(s,e-c):(r=null,n||(u=t.apply(a,i),a=i=null))};return function(){a=this,i=arguments,o=T.now();var c=n&&!r;return r||(r=setTimeout(s,e)),c&&(u=t.apply(a,i),a=i=null),u}},T.once=function(t){var e,n=!1;return function(){return n?e:(n=!0,e=t.apply(this,arguments),t=null,e)}},T.wrap=function(t,e){return T.partial(e,t)},T.compose=function(){var t=arguments;return function(){for(var e=arguments,n=t.length-1;n>=0;n--)e=[t[n].apply(this,e)];return e[0]}},T.after=function(t,e){return function(){if(--t<1)return e.apply(this,arguments)}},T.keys=function(t){if(!T.isObject(t))return[];if(x)return x(t);var e=[];for(var n in t)T.has(t,n)&&e.push(n);return e},T.values=function(t){for(var e=T.keys(t),n=e.length,r=new Array(n),i=0;i<n;i++)r[i]=t[e[i]];return r},T.pairs=function(t){for(var e=T.keys(t),n=e.length,r=new Array(n),i=0;i<n;i++)r[i]=[e[i],t[e[i]]];return r},T.invert=function(t){for(var e={},n=T.keys(t),r=0,i=n.length;r<i;r++)e[t[n[r]]]=n[r];return e},T.functions=T.methods=function(t){var e=[];for(var n in t)T.isFunction(t[n])&&e.push(n);return e.sort()},T.extend=function(t){return S(f.call(arguments,1),function(e){if(e)for(var n in e)t[n]=e[n]}),t},T.pick=function(t){var e={},n=l.apply(o,f.call(arguments,1));return S(n,function(n){n in t&&(e[n]=t[n])}),e},T.omit=function(t){var e={},n=l.apply(o,f.call(arguments,1));for(var r in t)T.contains(n,r)||(e[r]=t[r]);return e},T.defaults=function(t){return S(f.call(arguments,1),function(e){if(e)for(var n in e)void 0===t[n]&&(t[n]=e[n])}),t},T.clone=function(t){return T.isObject(t)?T.isArray(t)?t.slice():T.extend({},t):t},T.tap=function(t,e){return e(t),t};var L=function(t,e,n,r){if(t===e)return 0!==t||1/t==1/e;if(null==t||null==e)return t===e;t instanceof T&&(t=t._wrapped),e instanceof T&&(e=e._wrapped);var i=p.call(t);if(i!=p.call(e))return!1;switch(i){case"[object String]":return t==String(e);case"[object Number]":return t!=+t?e!=+e:0==t?1/t==1/e:t==+e;case"[object Date]":case"[object Boolean]":return+t==+e;case"[object RegExp]":return t.source==e.source&&t.global==e.global&&t.multiline==e.multiline&&t.ignoreCase==e.ignoreCase}if("object"!=typeof t||"object"!=typeof e)return!1;for(var a=n.length;a--;)if(n[a]==t)return r[a]==e;var o=t.constructor,u=e.constructor;if(o!==u&&!(T.isFunction(o)&&o instanceof o&&T.isFunction(u)&&u instanceof u)&&"constructor"in t&&"constructor"in e)return!1;n.push(t),r.push(e);var s=0,c=!0;if("[object Array]"==i){if(c=(s=t.length)==e.length)for(;s--&&(c=L(t[s],e[s],n,r)););}else{for(var f in t)if(T.has(t,f)&&(s++,!(c=T.has(e,f)&&L(t[f],e[f],n,r))))break;if(c){for(f in e)if(T.has(e,f)&&!s--)break;c=!s}}return n.pop(),r.pop(),c};T.isEqual=function(t,e){return L(t,e,[],[])},T.isEmpty=function(t){if(null==t)return!0;if(T.isArray(t)||T.isString(t))return 0===t.length;for(var e in t)if(T.has(t,e))return!1;return!0},T.isElement=function(t){return!(!t||1!==t.nodeType)},T.isArray=O||function(t){return"[object Array]"==p.call(t)},T.isObject=function(t){return t===Object(t)},S(["Arguments","Function","String","Number","Date","RegExp"],function(t){T["is"+t]=function(e){return p.call(e)=="[object "+t+"]"}}),T.isArguments(arguments)||(T.isArguments=function(t){return!(!t||!T.has(t,"callee"))}),T.isFunction=function(t){return"function"==typeof t},T.isFinite=function(t){return isFinite(t)&&!isNaN(parseFloat(t))},T.isNaN=function(t){return T.isNumber(t)&&t!=+t},T.isBoolean=function(t){return!0===t||!1===t||"[object Boolean]"==p.call(t)},T.isNull=function(t){return null===t},T.isUndefined=function(t){return void 0===t},T.has=function(t,e){return h.call(t,e)},T.noConflict=function(){return n._=i,this},T.identity=function(t){return t},T.constant=function(t){return function(){return t}},T.property=function(t){return function(e){return e[t]}},T.matches=function(t){return function(e){if(e===t)return!0;for(var n in t)if(t[n]!==e[n])return!1;return!0}},T.times=function(t,e,n){for(var r=Array(Math.max(0,t)),i=0;i<t;i++)r[i]=e.call(n,i);return r},T.random=function(t,e){return null==e&&(e=t,t=0),t+Math.floor(Math.random()*(e-t+1))},T.now=Date.now||function(){return(new Date).getTime()};var j={escape:{"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;"}};j.unescape=T.invert(j.escape);var C={escape:new RegExp("["+T.keys(j.escape).join("")+"]","g"),unescape:new RegExp("("+T.keys(j.unescape).join("|")+")","g")};T.each(["escape","unescape"],function(t){T[t]=function(e){return null==e?"":(""+e).replace(C[t],function(e){return j[t][e]})}}),T.result=function(t,e){if(null!=t){var n=t[e];return T.isFunction(n)?n.call(t):n}},T.mixin=function(t){S(T.functions(t),function(e){var n=T[e]=t[e];T.prototype[e]=function(){var t=[this._wrapped];return c.apply(t,arguments),H.call(this,n.apply(T,t))}})};var D=0;T.uniqueId=function(t){var e=++D+"";return t?t+e:e},T.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g};var F=/(.)^/,B={"'":"'","\\":"\\","\r":"r","\n":"n","\t":"t","\u2028":"u2028","\u2029":"u2029"},U=/\\|'|\r|\n|\t|\u2028|\u2029/g;T.template=function(t,e,n){var r;n=T.defaults({},n,T.templateSettings);var i=new RegExp([(n.escape||F).source,(n.interpolate||F).source,(n.evaluate||F).source].join("|")+"|$","g"),a=0,o="__p+='";t.replace(i,function(e,n,r,i,u){return o+=t.slice(a,u).replace(U,function(t){return"\\"+B[t]}),n&&(o+="'+\n((__t=("+n+"))==null?'':_.escape(__t))+\n'"),r&&(o+="'+\n((__t=("+r+"))==null?'':__t)+\n'"),i&&(o+="';\n"+i+"\n__p+='"),a=u+e.length,e}),o+="';\n",n.variable||(o="with(obj||{}){\n"+o+"}\n"),o="var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n"+o+"return __p;\n";try{r=new Function(n.variable||"obj","_",o)}catch(t){throw t.source=o,t}if(e)return r(e,T);var u=function(t){return r.call(this,t,T)};return u.source="function("+(n.variable||"obj")+"){\n"+o+"}",u},T.chain=function(t){return T(t).chain()};var H=function(t){return this._chain?T(t).chain():t};T.mixin(T),S(["pop","push","reverse","shift","sort","splice","unshift"],function(t){var e=o[t];T.prototype[t]=function(){var n=this._wrapped;return e.apply(n,arguments),"shift"!=t&&"splice"!=t||0!==n.length||delete n[0],H.call(this,n)}}),S(["concat","join","slice"],function(t){var e=o[t];T.prototype[t]=function(){return H.call(this,e.apply(this._wrapped,arguments))}}),T.extend(T.prototype,{chain:function(){return this._chain=!0,this},value:function(){return this._wrapped}}),void 0===(r=function(){return T}.apply(e,[]))||(t.exports=r)}).call(this)},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.build_scanners=function(){var t=new r.default;return t.append("eof_scanner",a),t.append("eol_scanner",o),t.append("eos_scanner",u),t.append("comment_scanner",c),t.append("keyword_scanner",s),t.append("operator_scanner",h),t.append("string_scanner",y),t.append("hexa_scanner",p),t.append("octal_scanner",l),t.append("decimal_scanner",f),t.append("identifier_scanner",v),t.append("unkown_scanner",d),t};var r=function(t){return t&&t.__esModule?t:{default:t}}(n(2)),i=n(0);function a(t){if(!t[0])return{length:0,type:i.token_types.EOF,text:t[0]}}function o(t){if(t.match(/^(\r\n|\r|\n)/))return{length:1,type:i.token_types.EOL,text:t.slice(0,1)}}function u(t){if(":"==t[0])return{length:1,type:i.token_types.EOS,text:":"}}function s(t,e,n){var r=t.match(/^[a-z$('?]+/i),a=n.getKeywords();if(r&&a.indexOf(r[0].toUpperCase())>-1)return{length:r[0].length,type:i.token_types.Keyword,text:r[0].toUpperCase()}}function c(t,e){var n=0;if(e&&("REM"==e.text||"'"==e.text)){for(;t[n]&&!t[n].match(/^(\r\n|\r|\n)/);)n++;return{length:n,type:i.token_types.Comment,text:t.slice(0,n)}}}function f(t){var e=t.match(/^((\+|-)?[\d.]+((e|d)(\+|-)?(\d))?(#|!|%)?)/i);if(e)return{length:e[0].length,type:i.token_types.DeciamlNum,text:e[0]}}function l(t){var e=t.match(/^&o?[0-7]*/i);if(e)return{length:e[0].length,type:i.token_types.OcatalNum,text:e[0]}}function p(t){var e=t.match(/^&h[0-9a-f]*/i);if(e)return{length:e[0].length,type:i.token_types.HexaNum,text:e[0]}}function h(t,e,n,r){var a=t.slice(0,3).match(/(MOD|AND|OR|XOR|EQV|IMP)/i)||t.slice(0,2).match(/(>=|<=|=>|=<|<>|==)/i)||t.match(/^(\^|\*|\/|\\|\+|-|>|<)/i);if(a)return{length:a[0].length,type:i.token_types.Operator,text:a[0]}}function y(t){var e=t.match(/^"([^"\r\n]*)"?/);if(e)return{length:e[0].length,type:i.token_types.String,text:e[0]}}function v(t){var e=t.match(/^([a-z]([a-z0-9.]+)?)(!|#|\$)?/i);if(e)return{length:e[0].length,type:i.token_types.Identifier,text:e[0]}}function d(t){return{length:1,type:i.token_types.Unknown,text:t[0]}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=n(11);var a=function(){function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.statements=e,this.operators=n,this.source="",this.pos=0,this.last_token=null,this.token=null,this.scanners=(0,i.build_scanners)(),this.states=[]}return r(t,[{key:"setSource",value:function(t){this.source=t.toUpperCase(),this.pos=0,this.last_token=null,this.token=null}},{key:"skipBlank",value:function(){var t=this.source.slice(this.pos).match(/^[ \t\f]+/);t&&(this.pos+=t[0].length)}},{key:"peekState",value:function(){this.states.push({last_token:this.last_token,pos:this.pos,token:this.token})}},{key:"seekState",value:function(){var t=this.states.pop();t&&(this.last_token=t.last_token,this.pos=t.pos,this.token=t.token)}},{key:"scan",value:function(){for(var t in this.skipBlank(),this.scanners._dict){var e=this.scanners._dict[t].value;if(this.token=e(this.source.slice(this.pos),this.last_token,this.statements,this.operators),this.token)return this.last_token=this.token,this.pos+=this.token.length,this.token}}}]),t}();e.default=a},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=s(n(12)),a=n(0),o=s(n(1)),u=n(9);function s(t){return t&&t.__esModule?t:{default:t}}var c=function(){function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.scanner=new i.default(e,n),this.expr_parser=new o.default,this.statement_parser=(0,u.build_satements)()}return r(t,[{key:"parse",value:function(t){this.code=t.toUpperCase(),this.scanner.setSource(t),this._nextToken();for(var e=[];this.token.type!=a.token_types.EOF;){var n=this._parseLine();e=e.concat(n)}return e}},{key:"_parseLine",value:function(){var t=[];for(this.token.type==a.token_types.DeciamlNum&&this._nextToken();!this._isLineTerminator();)t.push(this._parseStatement()),":"==this.token.text&&this._nextToken();return this._nextToken(),t}},{key:"_parseStatement",value:function(){var t,e,n=[];if(this.token.type==a.token_types.Keyword){if(t=this.token.text,e=this.statement_parser[t]){n=e(this.scanner,this.expr_parser);this.token=this.scanner.token}}else if(this.token.type==a.token_types.Identifier){var r=this.token;if(this._nextToken(),"="==this.token.text){if(t="LET",e=this.statement_parser.LET){n=e(this.scanner,this.expr_parser,r.text);this.token=this.scanner.token}}else this._throwError("Invalid token "+this.token.text)}else this._throwError("Invalid token "+this.token.text);return{statement:t,params:n}}},{key:"_isStatementTerminator",value:function(){return this.token.type==a.token_types.EOS||this.token.type==a.token_types.EOL||this.token.type==a.token_types.EOF}},{key:"_isLineTerminator",value:function(){return this.token.type==a.token_types.EOL||this.token.type==a.token_types.EOF}},{key:"_nextToken",value:function(){this.token=this.scanner.scan()}},{key:"_throwError",value:function(t){throw t}}]),t}();e.default=c},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}();var i=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}return r(t,[{key:"evaluate",value:function(t,e){return this.runtime=e,this._evaluateNode(t)}},{key:"_evaluateNode",value:function(t){if(t){if(4==t.type||5==t.type||6==t.type||8==t.type)return t.value;if(t.prefix){if(e=this.runtime.operators.get_uniary(t.operator))return e(this._evaluateNode(t.argument));throw"Invalid Operator "+t.operator}if(t.is_binary){var e,n=this._evaluateNode(t.left),r=this._evaluateNode(t.right);if(e=this.runtime.operators.get_binary(t.operator))return e(n,r);throw"Invalid Operator "+t.operator}if(t.is_array){var i=[],a=!0,o=!1,u=void 0;try{for(var s,c=t.object[Symbol.iterator]();!(a=(s=c.next()).done);a=!0){var f=s.value;i.push(this._evaluateNode(f))}}catch(t){o=!0,u=t}finally{try{!a&&c.return&&c.return()}finally{if(o)throw u}}return i}if(9==t.type)return this.runtime.var_manager.get(t.text);if(15==t.type){var l=this.runtime.var_manager.get(t.object.text),p=this._evaluateNode(t.property);if(l)return l.val[p];throw"Index '"+p+"' out of range"}if(16==t.type){var h=this.runtime.fn_manager.get(t.object.text),y=Array.isArray(t.property)?t.property:[t.property],v=[],d=!0,_=!1,k=void 0;try{for(var m,b=y[Symbol.iterator]();!(d=(m=b.next()).done);d=!0){var g=m.value;v.push(this._evaluateNode(g))}}catch(t){_=!0,k=t}finally{try{!d&&b.return&&b.return()}finally{if(_)throw k}}if(h)return h.apply(void 0,v);throw"Function '"+t.object.text+"' is not defined"}}}}]),t}();e.default=i},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}();var i=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.var_types={STR:0,NUM:1,ARR:2},this.builtin={E:{val:Math.E,type:this.var_types.NUM},PI:{val:Math.PI,type:this.var_types.NUM}},this.var_dict=this.builtin}return r(t,[{key:"clear",value:function(){this.var_dict=this.builtin}},{key:"get",value:function(t){return this.var_dict[t]}},{key:"register",value:function(t,e){this.var_dict[t]=e}}]),t}();e.default=i},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};function i(t){if("number"!=typeof t)throw"Number expected but got "+(void 0===t?"undefined":r(t));return t}function a(t){if("string"!=typeof t)throw"String expected but got "+(void 0===t?"undefined":r(t));return t}e.default=function(){var t={};return t.FIX=Math.round,t.INT=Math.floor,t.SGN=Math.sign,t.ABS=Math.abs,t.SQR=Math.sqrt,t.LOG=Math.log,t.EXP=Math.exp,t.SIN=Math.sin,t.SINH=Math.sinh,t.COS=Math.cos,t.COSH=Math.cosh,t.TAN=Math.tan,t.TANH=Math.tanh,t.ATN=Math.atan,t.MIN=Math.min,t.MAX=Math.max,t.RND=Math.random,t.ASC=function(t){return a(t).charCodeAt(0)},t.CHR=function(t){return i(t).charCodeAt(0)},t.STR=function(t){return t.toString()},t.HEX=function(t){return t.toString(16)},t.MATCH=function(t,e){return a(t).match(a(e))},t.LEFT=function(t,e){return a(t).substr(0,i(e))},t.SUBSTR=function(t,e,n){return a(t).substr(i(e),i(n))},t.LEN=function(t){return a(t).length},t}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=function(t){return t&&t.__esModule?t:{default:t}}(n(16));var a=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.builtin=(0,i.default)(),this.fn_dict=this.builtin}return r(t,[{key:"clear",value:function(){this.fn_dict=this.builtin}},{key:"get",value:function(t){return this.fn_dict[t]}},{key:"register",value:function(t,e){this.fn_dict[t]=e}}]),t}();e.default=a},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=c(n(17)),a=c(n(15)),o=c(n(14)),u=c(n(13)),s=c(n(8));function c(t){return t&&t.__esModule?t:{default:t}}var f=function(){function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.parser=new u.default(e,n),this.expr_evaluator=new o.default,this.var_manager=new a.default,this.statements=e,this.operators=n,this.fn_manager=new i.default,this.loop_man=new s.default}return r(t,[{key:"execute",value:function(t){var e=this.parser.parse(t);console.log(e);for(var n=0;n<e.length;)n=this._executeStatement(e[n],n)}},{key:"_executeStatement",value:function(t,e){var n=this.statements.get(t.statement);if(!n)throw"Statement "+t.statement+" not registered";return n.execute(t,this,e)||++e}}]),t}();e.default=f},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=u(n(18)),a=u(n(7)),o=u(n(3));function u(t){return t&&t.__esModule?t:{default:t}}var s=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.terminal=e,this.statements=new a.default(this.terminal),this.operators=new o.default,this.runtime=new i.default(this.statements,this.operators)}return r(t,[{key:"execute",value:function(t){this.terminal.clear(),this.runtime.execute(t)}},{key:"version",value:function(){return"0.1"}}]),t}();window.BASIC=s,e.default=s}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,