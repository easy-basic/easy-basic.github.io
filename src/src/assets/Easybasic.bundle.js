!function(t){var e={};function n(r){if(e[r])return e[r].exports;var i=e[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)n.d(r,i,function(e){return t[e]}.bind(null,i));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=17)}([function(t,e,n){"use strict";e.token_types=Object.freeze({Whitespace:0,Comment:1,EOL:2,Keyword:3,DeciamlNum:4,OcatalNum:5,HexaNum:6,Operator:7,UniaryOperator:14,String:8,Identifier:9,Unknown:10,EOF:11,LineNumber:12,EOS:13,Array:15,Function:16}),e.keywords=["END","FOR","NEXT","DATA","INPUT","DIM","READ","LET","GOTO","RUN","IF","RESTORE","GOSUB","RETURN","STOP","PRINT","?","CLEAR","LIST","NEW","ON","WAIT","DEF","POKE","CONT","OUT","LPRINT","LLIST","WIDTH","ELSE","TRON","TROFF","SWAP","ERASE","EDIT","ERROR","RESUME","DELETE","AUTO","RENUM","DEFSTR","DEFINT","DEFSNG","DEFDBL","LINE","WHILE","WEND","CALL","WRITE","OPTION","RANDOMIZE","OPEN","CLOSE","LOAD","MERGE","SAVE","COLOR","CLS","MOTOR","BSAVE","BLOAD","SOUND","BEEP","PSET","PRESET","SCREEN","KEY","LOCATE","TO","THEN","TAB(","STEP","USR","FN","SPC(","NOT","ERL","ERR","STRING$","USING","INSTR","VARPTR","CSRLIN","POINT","OFF","INKEY$","CVI","CVS","CVD","MKI$","MKS$","MKD$","EXTERR","FILES","FIELD","SYSTEM","NAME","LSET","RSET","KILL","PUT","GET","RESET","COMMON","CHAIN","DATE$","TIME$","PAINT","COM","CIRCLE","DRAW","PLAY","TIMER","ERDEV","IOCTL","CHDIR","MKDIR","RMDIR","SHELL","ENVIRON","VIEW","WINDOW","PMAP","PALETTE","LCOPY","CALLS","PCOPY","LOCK","UNLOCK","LEFT$","RIGHT$","MID$","SGN","INT","ABS","SQR","RND","SIN","LOG","EXP","COS","TAN","ATN","FRE","INP","POS","LEN","STR$","VAL","ASC","CHR$","PEEK","SPACE$","OCT$","HEX$","LPOS","CINT","CSNG","CDBL","FIX","PEN","STICK","STRIG","EOF","LOC","LOF","NOISE","AS","SHARED","ACCESS","RANDOM","OUTPUT","APPEND","BASE","SEG","ALL","REM","'"],e.binary_operators={"^":12,"*":11,"/":11,"\\":10,MOD:9,"+":8,"-":8,">":7,"<":7,">=":7,"<=":7,"=>":7,"=<":7,"<>":7,"><":7,"==":7,AND:5,OR:4,XOR:3,EQV:2,IMP:1},e.unary_operators=["-","+","NOT"]},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=n(0);var u=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}return r(t,[{key:"parse",value:function(t,e){return this.scanner=t,this._parseUntil(e)}},{key:"_parseUntil",value:function(t){for(var e=[],n=!1;;){if(this.scanner.peekState(),this.token=this.scanner.scan(),this.scanner.seekState(),!this.token.text||this.token.type==i.token_types.EOL||":"==this.token.text){this.token=this.scanner.scan(),n=!1;break}if(this.token.text==t){this.token=this.scanner.scan(),n=!0;break}if(e.length>0&&","!=this.token.text)throw"Unexpected token "+this.token.text;","==this.token.text&&(this.token=this.scanner.scan());var r=this._binaryParser();e.push(r)}return 1==e.length?[n,e[0]]:[n,e]}},{key:"_readToken",value:function(){if(this.token=this.scanner.scan(),this.token.type==i.token_types.DeciamlNum){var t=this.token.text.replace(/(!|%|#|)$/,"")||0;return Object.assign(this.token,{value:parseFloat(t)})}if(this.token.type==i.token_types.OcatalNum){t=this.token.text.replace(/^&o?/i,"")||"0";return Object.assign(this.token,{value:this._convertFromBaseToBase(t,8,10)})}if(this.token.type==i.token_types.HexaNum){t=this.token.text.replace(/^&h/i,"")||"0";return Object.assign(this.token,{value:this._convertFromBaseToBase(t,16,10)})}if(this.token.type==i.token_types.String)return Object.assign(this.token,{value:this.token.text.substr(1).slice(0,-1)});if("["==this.token.text)return{object:this._parseUntil("]")[1],is_array:!0};if(this._isUniaryOp(this.token.text))return{type:i.token_types.UniaryOperator,operator:this.token.text,argument:this._readToken(),prefix:!0};if("("==this.token.text)return this._parseUntil(")")[1];if(this.token.type==i.token_types.Identifier){this.scanner.peekState();var e=this.token;if(this.token=this.scanner.scan(),"["==this.token.text)return{type:i.token_types.Array,object:e,property:this._parseUntil("]")[1]};if("("==this.token.text)return{type:i.token_types.Function,object:e,property:this._parseUntil(")")[1]};this.scanner.seekState(),this.token=this.scanner.token}return this.token}},{key:"_binaryPrecedence",value:function(t){return i.binary_operators[t]||0}},{key:"_readBinaryToken",value:function(){return this.scanner.peekState(),this.token=this.scanner.scan(),this.token.type==i.token_types.Operator?Object.assign(this.token,{prec:this._binaryPrecedence(this.token.text)}):(this.scanner.seekState(),!1)}},{key:"_isUniaryOp",value:function(t){return["+","-","NOT"].indexOf(t)>-1}},{key:"_binaryParser",value:function(){var t=this._readToken(),e=this._readBinaryToken();if(!e)return t;var n=this._readToken();if(!n)throw"Expected expression after "+e+", "+this.scanner.index;for(var r=[t,e,n];(e=this._readBinaryToken())&&0!=e.prec;){for(;r.length>2&&e.prec<=r[r.length-2].prec;){n=r.pop();var i=r.pop();t=r.pop();var u=this._createBinaryExpression(i,t,n);r.push(u)}if(!(u=this._readToken()))throw"Expected expression after "+e+", "+this.scanner.index;r.push(e,u)}var a=r.length-1;for(u=r[a];a>1;)u=this._createBinaryExpression(r[a-1],r[a-2],u),a-=2;return u}},{key:"_createBinaryExpression",value:function(t,e,n){return{operator:t.text,left:e,right:n,is_binary:!0}}},{key:"_convertFromBaseToBase",value:function(t,e,n){var r=parseInt(t,e);return parseInt(r.toString(n))}}]),t}();e.default=u},function(t,e,n){var r,i=n(8),u=function(t,e,n,r){return{key:t,value:e,next:n,prev:r}};r=function(){var t=this;t._dict={},t._first=null,t._last=null,t._size=0;var e=i.toArray(arguments);t._stringify=function(t){return t},"function"==typeof e[0]&&(t._stringify=e.shift()),i.each(e,function(e){t.putBefore(e[0],e[1],null)})},i.extend(r.prototype,{_k:function(t){return" "+this._stringify(t)},empty:function(){return!this._first},size:function(){return this._size},_linkEltIn:function(t){t.next?(t.prev=t.next.prev,t.next.prev=t,t.prev&&(t.prev.next=t)):(t.prev=this._last,this._last&&(this._last.next=t),this._last=t),null!==this._first&&this._first!==t.next||(this._first=t)},_linkEltOut:function(t){t.next&&(t.next.prev=t.prev),t.prev&&(t.prev.next=t.next),t===this._last&&(this._last=t.prev),t===this._first&&(this._first=t.next)},putBefore:function(t,e,n){if(this._dict[this._k(t)])throw new Error("Item "+t+" already present in OrderedDict");var r=u(t,e,n?this._dict[this._k(n)]:null);if(void 0===r.next)throw new Error("could not find item to put this one before");this._linkEltIn(r),this._dict[this._k(t)]=r,this._size++},append:function(t,e){this.putBefore(t,e,null)},remove:function(t){var e=this._dict[this._k(t)];if(void 0===e)throw new Error("Item "+t+" not present in OrderedDict");return this._linkEltOut(e),this._size--,delete this._dict[this._k(t)],e.value},get:function(t){if(this.has(t))return this._dict[this._k(t)].value},has:function(t){return i.has(this._dict,this._k(t))},forEach:function(t){for(var e=0,n=this._first;null!==n;){if(t(n.value,n.key,e)===r.BREAK)return;n=n.next,e++}},first:function(){if(!this.empty())return this._first.key},firstValue:function(){if(!this.empty())return this._first.value},last:function(){if(!this.empty())return this._last.key},lastValue:function(){if(!this.empty())return this._last.value},prev:function(t){if(this.has(t)){var e=this._dict[this._k(t)];if(e.prev)return e.prev.key}return null},next:function(t){if(this.has(t)){var e=this._dict[this._k(t)];if(e.next)return e.next.key}return null},moveBefore:function(t,e){var n=this._dict[this._k(t)],r=e?this._dict[this._k(e)]:null;if(void 0===n)throw new Error("Item to move is not present");if(void 0===r)throw new Error("Could not find element to move this one before");r!==n.next&&(this._linkEltOut(n),n.next=r,this._linkEltIn(n))},indexOf:function(t){var e=this,n=null;return e.forEach(function(i,u,a){if(e._k(u)===e._k(t))return n=a,r.BREAK}),n},_checkRep:function(){i.each(this._dict,function(t,e){if(e.next===e)throw new Error("Next is a loop");if(e.prev===e)throw new Error("Prev is a loop")})}}),r.BREAK={break:!0},t.exports=r},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}();var i=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.builtin_uniary={"+":function(t){return t},"-":function(t){return-t},NOT:function(t){return~t}},this.builtin_binary={"+":function(t,e){return t+e},"-":function(t,e){return t-e},"*":function(t,e){return t*e},"/":function(t,e){return t/e},"\\":function(t,e){return parseInt(t/e)},"^":function(t,e){return Math.pow(t,e)},"<":function(t,e){return t<e},">":function(t,e){return t>e},"==":function(t,e){return t==e},"<=":function(t,e){return t<=e},"=<":function(t,e){return t<=e},">=":function(t,e){return t>=e},"=>":function(t,e){return t>=e},"<>":function(t,e){return t!=e},AND:function(t,e){return t&&e},OR:function(t,e){return t||e},MOD:function(t,e){return t%e},XOR:function(t,e){return t^e},EQV:function(t,e){return~(t^e)},IMP:function(t,e){return~t^e}},this.uniary_dict=this.builtin_uniary,this.binary_dict=this.builtin_binary}return r(t,[{key:"clear",value:function(){this.uniary_dict=this.builtin_uniary,this.binary_dict=this.builtin_binary}},{key:"get_uniary",value:function(t){return this.uniary_dict[t]}},{key:"get_binary",value:function(t){return this.binary_dict[t]}},{key:"register_uniary",value:function(t,e){this.uniary_dict[t]=e}},{key:"register_binary",value:function(t,e){this.binary_dict[t]=e}},{key:"_getOps",value:function(){var t=Object.keys(this.uniary_dict),e=Object.keys(this.binary_dict);return t.concat(e)}},{key:"_getMaxOpLength",value:function(){var t=0;return this._getOps().map(function(e){e.length>t&&(t=e.length)}),t}},{key:"isOp",value:function(t){for(var e=this._getOps(),n=this._getMaxOpLength();n>0;n--){var r=t.slice(0,n);if(e.indexOf(r)>-1)return[n,r]}}}]),t}();e.default=i},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}();e.LetStatement=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.type_dict={string:0,number:1,object:2}}return i(t,[{key:"execute",value:function(t,e){var n=t.params.ident,i=e.expr_evaluator.evaluate(t.params.val,e),u=this.type_dict[void 0===i?"undefined":r(i)];return e.var_manager.register(n,i,u),i}}]),t}()},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}();var i=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.terminal=e}return r(t,[{key:"execute",value:function(t,e){this.runtime=e;var n=t.format&&t.format.length&&t.format[0]||"",r=Array.isArray(t.params.exprs)?t.params.exprs:[t.params.exprs],i=!0,u=!1,a=void 0;try{for(var o,s=r[Symbol.iterator]();!(i=(o=s.next()).done);i=!0){var c=o.value,l=this.formateExpr(n,c,e);this.terminal.write(l+"\n")}}catch(t){u=!0,a=t}finally{try{!i&&s.return&&s.return()}finally{if(u)throw a}}}},{key:"formateExpr",value:function(t,e,n){return n.expr_evaluator.evaluate(e,n)}}]),t}();e.default=i},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=function(t){return t&&t.__esModule?t:{default:t}}(n(5)),u=n(4);var a=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.builtin_statements={PRINT:new i.default(e),LET:new u.LetStatement(e)},this.statement_dict=this.builtin_statements}return r(t,[{key:"clear",value:function(){this.statement_dict=this.builtin_statements}},{key:"get",value:function(t){return this.statement_dict[t]}},{key:"remove",value:function(t){delete this.statement_dict[t]}},{key:"register",value:function(t,e){this.statement_dict[t]=e}},{key:"getKeywords",value:function(){return Object.keys(this.statement_dict)}}]),t}();e.default=a},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.build_satements=function(){var t=new r.default;return t.ARC=a,t.ELLIPSE=a,t.LINE=a,t.POINT=a,t.QUAD=a,t.RECT=a,t.TRIANGLE=a,t.CIRCLE=a,t.COLOR=a,t.DRAW=a,t.PAINT=a,t.PALETTE=a,t.POINT=a,t.GET=a,t.PUT=a,t.CLS=a,t.LOCATE=a,t.PRINT=l,t["?"]=l,t.BEEP=a,t.NOISE=a,t.PLAY=a,t.INPUT=a,t.LET=o,t.DATA=a,t.READ=a,t.ERASE=u,t.SWAP=u,t.END=u,t.WEND=u,t.NEW=u,t.ELSE=u,t.ENDIF=u,t.REM=u,t["'"]=u,t.FOR=s,t.NEXT=a,t.WHILE=a,t.IF=c,t.ELIF=c,t};var r=i(n(2));i(n(1));function i(t){return t&&t.__esModule?t:{default:t}}function u(t,e){e.parse(t)}function a(t,e){return e.parse(t)}function o(t,e,n){if(!n){n=t.scan().text;var r=t.scan();if("="!=r.text)throw"Invalid token "+r.text}return{ident:n,val:e.parse(t)[1]}}function s(t,e){var n=t.scan().text;if("="!=(u=t.scan()).text)throw"Invalid token "+u.text;var r=e.parse(t,"TO");if("TO"!=(u=t.scan()).text)throw"Invalid token "+u.text;var i,u,a=e.parse(t,"STEP");return"STEP"==(u=t.scan()).text&&(i=e.parse(t)),{ident:n,start:r,end:a,step:i}}function c(t,e){return{cond:e.parse(t)[1]}}function l(t,e){var n=e.parse(t,"USING"),r=n[0]&&e.parse(t)[1];return{exprs:n[1],format:r}}},function(t,e,n){var r;(function(){var n=this,i=n._,u={},a=Array.prototype,o=Object.prototype,s=Function.prototype,c=a.push,l=a.slice,f=a.concat,h=o.toString,p=o.hasOwnProperty,y=a.forEach,v=a.map,d=a.reduce,_=a.reduceRight,k=a.filter,m=a.every,b=a.some,g=a.indexOf,E=a.lastIndexOf,O=Array.isArray,x=Object.keys,T=s.bind,w=function(t){return t instanceof w?t:this instanceof w?void(this._wrapped=t):new w(t)};void 0!==t&&t.exports&&(e=t.exports=w),e._=w,w.VERSION="1.6.0";var S=w.each=w.forEach=function(t,e,n){if(null==t)return t;if(y&&t.forEach===y)t.forEach(e,n);else if(t.length===+t.length){for(var r=0,i=t.length;r<i;r++)if(e.call(n,t[r],r,t)===u)return}else{var a=w.keys(t);for(r=0,i=a.length;r<i;r++)if(e.call(n,t[a[r]],a[r],t)===u)return}return t};w.map=w.collect=function(t,e,n){var r=[];return null==t?r:v&&t.map===v?t.map(e,n):(S(t,function(t,i,u){r.push(e.call(n,t,i,u))}),r)};var N="Reduce of empty array with no initial value";w.reduce=w.foldl=w.inject=function(t,e,n,r){var i=arguments.length>2;if(null==t&&(t=[]),d&&t.reduce===d)return r&&(e=w.bind(e,r)),i?t.reduce(e,n):t.reduce(e);if(S(t,function(t,u,a){i?n=e.call(r,n,t,u,a):(n=t,i=!0)}),!i)throw new TypeError(N);return n},w.reduceRight=w.foldr=function(t,e,n,r){var i=arguments.length>2;if(null==t&&(t=[]),_&&t.reduceRight===_)return r&&(e=w.bind(e,r)),i?t.reduceRight(e,n):t.reduceRight(e);var u=t.length;if(u!==+u){var a=w.keys(t);u=a.length}if(S(t,function(o,s,c){s=a?a[--u]:--u,i?n=e.call(r,n,t[s],s,c):(n=t[s],i=!0)}),!i)throw new TypeError(N);return n},w.find=w.detect=function(t,e,n){var r;return I(t,function(t,i,u){if(e.call(n,t,i,u))return r=t,!0}),r},w.filter=w.select=function(t,e,n){var r=[];return null==t?r:k&&t.filter===k?t.filter(e,n):(S(t,function(t,i,u){e.call(n,t,i,u)&&r.push(t)}),r)},w.reject=function(t,e,n){return w.filter(t,function(t,r,i){return!e.call(n,t,r,i)},n)},w.every=w.all=function(t,e,n){e||(e=w.identity);var r=!0;return null==t?r:m&&t.every===m?t.every(e,n):(S(t,function(t,i,a){if(!(r=r&&e.call(n,t,i,a)))return u}),!!r)};var I=w.some=w.any=function(t,e,n){e||(e=w.identity);var r=!1;return null==t?r:b&&t.some===b?t.some(e,n):(S(t,function(t,i,a){if(r||(r=e.call(n,t,i,a)))return u}),!!r)};w.contains=w.include=function(t,e){return null!=t&&(g&&t.indexOf===g?-1!=t.indexOf(e):I(t,function(t){return t===e}))},w.invoke=function(t,e){var n=l.call(arguments,2),r=w.isFunction(e);return w.map(t,function(t){return(r?e:t[e]).apply(t,n)})},w.pluck=function(t,e){return w.map(t,w.property(e))},w.where=function(t,e){return w.filter(t,w.matches(e))},w.findWhere=function(t,e){return w.find(t,w.matches(e))},w.max=function(t,e,n){if(!e&&w.isArray(t)&&t[0]===+t[0]&&t.length<65535)return Math.max.apply(Math,t);var r=-1/0,i=-1/0;return S(t,function(t,u,a){var o=e?e.call(n,t,u,a):t;o>i&&(r=t,i=o)}),r},w.min=function(t,e,n){if(!e&&w.isArray(t)&&t[0]===+t[0]&&t.length<65535)return Math.min.apply(Math,t);var r=1/0,i=1/0;return S(t,function(t,u,a){var o=e?e.call(n,t,u,a):t;o<i&&(r=t,i=o)}),r},w.shuffle=function(t){var e,n=0,r=[];return S(t,function(t){e=w.random(n++),r[n-1]=r[e],r[e]=t}),r},w.sample=function(t,e,n){return null==e||n?(t.length!==+t.length&&(t=w.values(t)),t[w.random(t.length-1)]):w.shuffle(t).slice(0,Math.max(0,e))};var A=function(t){return null==t?w.identity:w.isFunction(t)?t:w.property(t)};w.sortBy=function(t,e,n){return e=A(e),w.pluck(w.map(t,function(t,r,i){return{value:t,index:r,criteria:e.call(n,t,r,i)}}).sort(function(t,e){var n=t.criteria,r=e.criteria;if(n!==r){if(n>r||void 0===n)return 1;if(n<r||void 0===r)return-1}return t.index-e.index}),"value")};var R=function(t){return function(e,n,r){var i={};return n=A(n),S(e,function(u,a){var o=n.call(r,u,a,e);t(i,o,u)}),i}};w.groupBy=R(function(t,e,n){w.has(t,e)?t[e].push(n):t[e]=[n]}),w.indexBy=R(function(t,e,n){t[e]=n}),w.countBy=R(function(t,e){w.has(t,e)?t[e]++:t[e]=1}),w.sortedIndex=function(t,e,n,r){for(var i=(n=A(n)).call(r,e),u=0,a=t.length;u<a;){var o=u+a>>>1;n.call(r,t[o])<i?u=o+1:a=o}return u},w.toArray=function(t){return t?w.isArray(t)?l.call(t):t.length===+t.length?w.map(t,w.identity):w.values(t):[]},w.size=function(t){return null==t?0:t.length===+t.length?t.length:w.keys(t).length},w.first=w.head=w.take=function(t,e,n){if(null!=t)return null==e||n?t[0]:e<0?[]:l.call(t,0,e)},w.initial=function(t,e,n){return l.call(t,0,t.length-(null==e||n?1:e))},w.last=function(t,e,n){if(null!=t)return null==e||n?t[t.length-1]:l.call(t,Math.max(t.length-e,0))},w.rest=w.tail=w.drop=function(t,e,n){return l.call(t,null==e||n?1:e)},w.compact=function(t){return w.filter(t,w.identity)};var M=function(t,e,n){return e&&w.every(t,w.isArray)?f.apply(n,t):(S(t,function(t){w.isArray(t)||w.isArguments(t)?e?c.apply(n,t):M(t,e,n):n.push(t)}),n)};w.flatten=function(t,e){return M(t,e,[])},w.without=function(t){return w.difference(t,l.call(arguments,1))},w.partition=function(t,e){var n=[],r=[];return S(t,function(t){(e(t)?n:r).push(t)}),[n,r]},w.uniq=w.unique=function(t,e,n,r){w.isFunction(e)&&(r=n,n=e,e=!1);var i=n?w.map(t,n,r):t,u=[],a=[];return S(i,function(n,r){(e?r&&a[a.length-1]===n:w.contains(a,n))||(a.push(n),u.push(t[r]))}),u},w.union=function(){return w.uniq(w.flatten(arguments,!0))},w.intersection=function(t){var e=l.call(arguments,1);return w.filter(w.uniq(t),function(t){return w.every(e,function(e){return w.contains(e,t)})})},w.difference=function(t){var e=f.apply(a,l.call(arguments,1));return w.filter(t,function(t){return!w.contains(e,t)})},w.zip=function(){for(var t=w.max(w.pluck(arguments,"length").concat(0)),e=new Array(t),n=0;n<t;n++)e[n]=w.pluck(arguments,""+n);return e},w.object=function(t,e){if(null==t)return{};for(var n={},r=0,i=t.length;r<i;r++)e?n[t[r]]=e[r]:n[t[r][0]]=t[r][1];return n},w.indexOf=function(t,e,n){if(null==t)return-1;var r=0,i=t.length;if(n){if("number"!=typeof n)return t[r=w.sortedIndex(t,e)]===e?r:-1;r=n<0?Math.max(0,i+n):n}if(g&&t.indexOf===g)return t.indexOf(e,n);for(;r<i;r++)if(t[r]===e)return r;return-1},w.lastIndexOf=function(t,e,n){if(null==t)return-1;var r=null!=n;if(E&&t.lastIndexOf===E)return r?t.lastIndexOf(e,n):t.lastIndexOf(e);for(var i=r?n:t.length;i--;)if(t[i]===e)return i;return-1},w.range=function(t,e,n){arguments.length<=1&&(e=t||0,t=0),n=arguments[2]||1;for(var r=Math.max(Math.ceil((e-t)/n),0),i=0,u=new Array(r);i<r;)u[i++]=t,t+=n;return u};var P=function(){};w.bind=function(t,e){var n,r;if(T&&t.bind===T)return T.apply(t,l.call(arguments,1));if(!w.isFunction(t))throw new TypeError;return n=l.call(arguments,2),r=function(){if(!(this instanceof r))return t.apply(e,n.concat(l.call(arguments)));P.prototype=t.prototype;var i=new P;P.prototype=null;var u=t.apply(i,n.concat(l.call(arguments)));return Object(u)===u?u:i}},w.partial=function(t){var e=l.call(arguments,1);return function(){for(var n=0,r=e.slice(),i=0,u=r.length;i<u;i++)r[i]===w&&(r[i]=arguments[n++]);for(;n<arguments.length;)r.push(arguments[n++]);return t.apply(this,r)}},w.bindAll=function(t){var e=l.call(arguments,1);if(0===e.length)throw new Error("bindAll must be passed function names");return S(e,function(e){t[e]=w.bind(t[e],t)}),t},w.memoize=function(t,e){var n={};return e||(e=w.identity),function(){var r=e.apply(this,arguments);return w.has(n,r)?n[r]:n[r]=t.apply(this,arguments)}},w.delay=function(t,e){var n=l.call(arguments,2);return setTimeout(function(){return t.apply(null,n)},e)},w.defer=function(t){return w.delay.apply(w,[t,1].concat(l.call(arguments,1)))},w.throttle=function(t,e,n){var r,i,u,a=null,o=0;n||(n={});var s=function(){o=!1===n.leading?0:w.now(),a=null,u=t.apply(r,i),r=i=null};return function(){var c=w.now();o||!1!==n.leading||(o=c);var l=e-(c-o);return r=this,i=arguments,l<=0?(clearTimeout(a),a=null,o=c,u=t.apply(r,i),r=i=null):a||!1===n.trailing||(a=setTimeout(s,l)),u}},w.debounce=function(t,e,n){var r,i,u,a,o,s=function(){var c=w.now()-a;c<e?r=setTimeout(s,e-c):(r=null,n||(o=t.apply(u,i),u=i=null))};return function(){u=this,i=arguments,a=w.now();var c=n&&!r;return r||(r=setTimeout(s,e)),c&&(o=t.apply(u,i),u=i=null),o}},w.once=function(t){var e,n=!1;return function(){return n?e:(n=!0,e=t.apply(this,arguments),t=null,e)}},w.wrap=function(t,e){return w.partial(e,t)},w.compose=function(){var t=arguments;return function(){for(var e=arguments,n=t.length-1;n>=0;n--)e=[t[n].apply(this,e)];return e[0]}},w.after=function(t,e){return function(){if(--t<1)return e.apply(this,arguments)}},w.keys=function(t){if(!w.isObject(t))return[];if(x)return x(t);var e=[];for(var n in t)w.has(t,n)&&e.push(n);return e},w.values=function(t){for(var e=w.keys(t),n=e.length,r=new Array(n),i=0;i<n;i++)r[i]=t[e[i]];return r},w.pairs=function(t){for(var e=w.keys(t),n=e.length,r=new Array(n),i=0;i<n;i++)r[i]=[e[i],t[e[i]]];return r},w.invert=function(t){for(var e={},n=w.keys(t),r=0,i=n.length;r<i;r++)e[t[n[r]]]=n[r];return e},w.functions=w.methods=function(t){var e=[];for(var n in t)w.isFunction(t[n])&&e.push(n);return e.sort()},w.extend=function(t){return S(l.call(arguments,1),function(e){if(e)for(var n in e)t[n]=e[n]}),t},w.pick=function(t){var e={},n=f.apply(a,l.call(arguments,1));return S(n,function(n){n in t&&(e[n]=t[n])}),e},w.omit=function(t){var e={},n=f.apply(a,l.call(arguments,1));for(var r in t)w.contains(n,r)||(e[r]=t[r]);return e},w.defaults=function(t){return S(l.call(arguments,1),function(e){if(e)for(var n in e)void 0===t[n]&&(t[n]=e[n])}),t},w.clone=function(t){return w.isObject(t)?w.isArray(t)?t.slice():w.extend({},t):t},w.tap=function(t,e){return e(t),t};var L=function(t,e,n,r){if(t===e)return 0!==t||1/t==1/e;if(null==t||null==e)return t===e;t instanceof w&&(t=t._wrapped),e instanceof w&&(e=e._wrapped);var i=h.call(t);if(i!=h.call(e))return!1;switch(i){case"[object String]":return t==String(e);case"[object Number]":return t!=+t?e!=+e:0==t?1/t==1/e:t==+e;case"[object Date]":case"[object Boolean]":return+t==+e;case"[object RegExp]":return t.source==e.source&&t.global==e.global&&t.multiline==e.multiline&&t.ignoreCase==e.ignoreCase}if("object"!=typeof t||"object"!=typeof e)return!1;for(var u=n.length;u--;)if(n[u]==t)return r[u]==e;var a=t.constructor,o=e.constructor;if(a!==o&&!(w.isFunction(a)&&a instanceof a&&w.isFunction(o)&&o instanceof o)&&"constructor"in t&&"constructor"in e)return!1;n.push(t),r.push(e);var s=0,c=!0;if("[object Array]"==i){if(c=(s=t.length)==e.length)for(;s--&&(c=L(t[s],e[s],n,r)););}else{for(var l in t)if(w.has(t,l)&&(s++,!(c=w.has(e,l)&&L(t[l],e[l],n,r))))break;if(c){for(l in e)if(w.has(e,l)&&!s--)break;c=!s}}return n.pop(),r.pop(),c};w.isEqual=function(t,e){return L(t,e,[],[])},w.isEmpty=function(t){if(null==t)return!0;if(w.isArray(t)||w.isString(t))return 0===t.length;for(var e in t)if(w.has(t,e))return!1;return!0},w.isElement=function(t){return!(!t||1!==t.nodeType)},w.isArray=O||function(t){return"[object Array]"==h.call(t)},w.isObject=function(t){return t===Object(t)},S(["Arguments","Function","String","Number","Date","RegExp"],function(t){w["is"+t]=function(e){return h.call(e)=="[object "+t+"]"}}),w.isArguments(arguments)||(w.isArguments=function(t){return!(!t||!w.has(t,"callee"))}),w.isFunction=function(t){return"function"==typeof t},w.isFinite=function(t){return isFinite(t)&&!isNaN(parseFloat(t))},w.isNaN=function(t){return w.isNumber(t)&&t!=+t},w.isBoolean=function(t){return!0===t||!1===t||"[object Boolean]"==h.call(t)},w.isNull=function(t){return null===t},w.isUndefined=function(t){return void 0===t},w.has=function(t,e){return p.call(t,e)},w.noConflict=function(){return n._=i,this},w.identity=function(t){return t},w.constant=function(t){return function(){return t}},w.property=function(t){return function(e){return e[t]}},w.matches=function(t){return function(e){if(e===t)return!0;for(var n in t)if(t[n]!==e[n])return!1;return!0}},w.times=function(t,e,n){for(var r=Array(Math.max(0,t)),i=0;i<t;i++)r[i]=e.call(n,i);return r},w.random=function(t,e){return null==e&&(e=t,t=0),t+Math.floor(Math.random()*(e-t+1))},w.now=Date.now||function(){return(new Date).getTime()};var j={escape:{"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;"}};j.unescape=w.invert(j.escape);var C={escape:new RegExp("["+w.keys(j.escape).join("")+"]","g"),unescape:new RegExp("("+w.keys(j.unescape).join("|")+")","g")};w.each(["escape","unescape"],function(t){w[t]=function(e){return null==e?"":(""+e).replace(C[t],function(e){return j[t][e]})}}),w.result=function(t,e){if(null!=t){var n=t[e];return w.isFunction(n)?n.call(t):n}},w.mixin=function(t){S(w.functions(t),function(e){var n=w[e]=t[e];w.prototype[e]=function(){var t=[this._wrapped];return c.apply(t,arguments),H.call(this,n.apply(w,t))}})};var D=0;w.uniqueId=function(t){var e=++D+"";return t?t+e:e},w.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g};var F=/(.)^/,B={"'":"'","\\":"\\","\r":"r","\n":"n","\t":"t","\u2028":"u2028","\u2029":"u2029"},U=/\\|'|\r|\n|\t|\u2028|\u2029/g;w.template=function(t,e,n){var r;n=w.defaults({},n,w.templateSettings);var i=new RegExp([(n.escape||F).source,(n.interpolate||F).source,(n.evaluate||F).source].join("|")+"|$","g"),u=0,a="__p+='";t.replace(i,function(e,n,r,i,o){return a+=t.slice(u,o).replace(U,function(t){return"\\"+B[t]}),n&&(a+="'+\n((__t=("+n+"))==null?'':_.escape(__t))+\n'"),r&&(a+="'+\n((__t=("+r+"))==null?'':__t)+\n'"),i&&(a+="';\n"+i+"\n__p+='"),u=o+e.length,e}),a+="';\n",n.variable||(a="with(obj||{}){\n"+a+"}\n"),a="var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n"+a+"return __p;\n";try{r=new Function(n.variable||"obj","_",a)}catch(t){throw t.source=a,t}if(e)return r(e,w);var o=function(t){return r.call(this,t,w)};return o.source="function("+(n.variable||"obj")+"){\n"+a+"}",o},w.chain=function(t){return w(t).chain()};var H=function(t){return this._chain?w(t).chain():t};w.mixin(w),S(["pop","push","reverse","shift","sort","splice","unshift"],function(t){var e=a[t];w.prototype[t]=function(){var n=this._wrapped;return e.apply(n,arguments),"shift"!=t&&"splice"!=t||0!==n.length||delete n[0],H.call(this,n)}}),S(["concat","join","slice"],function(t){var e=a[t];w.prototype[t]=function(){return H.call(this,e.apply(this._wrapped,arguments))}}),w.extend(w.prototype,{chain:function(){return this._chain=!0,this},value:function(){return this._wrapped}}),void 0===(r=function(){return w}.apply(e,[]))||(t.exports=r)}).call(this)},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.build_scanners=function(){var t=new r.default;return t.append("eof_scanner",u),t.append("eol_scanner",a),t.append("eos_scanner",o),t.append("comment_scanner",c),t.append("keyword_scanner",s),t.append("operator_scanner",p),t.append("string_scanner",y),t.append("hexa_scanner",h),t.append("octal_scanner",f),t.append("decimal_scanner",l),t.append("identifier_scanner",v),t.append("unkown_scanner",d),t};var r=function(t){return t&&t.__esModule?t:{default:t}}(n(2)),i=n(0);function u(t){if(!t[0])return{length:0,type:i.token_types.EOF,text:t[0]}}function a(t){if(t.match(/^(\r\n|\r|\n)/))return{length:1,type:i.token_types.EOL,text:t.slice(0,1)}}function o(t){if(":"==t[0])return{length:1,type:i.token_types.EOS,text:":"}}function s(t,e,n){var r=t.match(/^[a-z$('?]+/i),u=n.getKeywords();if(r&&u.indexOf(r[0].toUpperCase())>-1)return{length:r[0].length,type:i.token_types.Keyword,text:r[0].toUpperCase()}}function c(t,e){var n=0;if(e&&("REM"==e.text||"'"==e.text)){for(;t[n]&&!t[n].match(/^(\r\n|\r|\n)/);)n++;return{length:n,type:i.token_types.Comment,text:t.slice(0,n)}}}function l(t){var e=t.match(/^((\+|-)?[\d.]+((e|d)(\+|-)?(\d))?(#|!|%)?)/i);if(e)return{length:e[0].length,type:i.token_types.DeciamlNum,text:e[0]}}function f(t){var e=t.match(/^&o?[0-7]*/i);if(e)return{length:e[0].length,type:i.token_types.OcatalNum,text:e[0]}}function h(t){var e=t.match(/^&h[0-9a-f]*/i);if(e)return{length:e[0].length,type:i.token_types.HexaNum,text:e[0]}}function p(t,e,n,r){var u=t.slice(0,3).match(/(MOD|AND|OR|XOR|EQV|IMP)/i)||t.slice(0,2).match(/(>=|<=|=>|=<|<>|==)/i)||t.match(/^(\^|\*|\/|\\|\+|-|>|<)/i);if(u)return{length:u[0].length,type:i.token_types.Operator,text:u[0]}}function y(t){var e=t.match(/^"([^"\r\n]*)"?/);if(e)return{length:e[0].length,type:i.token_types.String,text:e[0]}}function v(t){var e=t.match(/^([a-z]([a-z0-9.]+)?)(!|#|\$)?/i);if(e)return{length:e[0].length,type:i.token_types.Identifier,text:e[0]}}function d(t){return{length:1,type:i.token_types.Unknown,text:t[0]}}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=n(9);var u=function(){function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.statements=e,this.operators=n,this.source="",this.pos=0,this.last_token=null,this.token=null,this.scanners=(0,i.build_scanners)(),this.states=[]}return r(t,[{key:"setSource",value:function(t){this.source=t.toUpperCase(),this.pos=0,this.last_token=null,this.token=null}},{key:"skipBlank",value:function(){var t=this.source.slice(this.pos).match(/^[ \t\f]+/);t&&(this.pos+=t.length)}},{key:"peekState",value:function(){this.states.push({last_token:this.last_token,pos:this.pos,token:this.token})}},{key:"seekState",value:function(){var t=this.states.pop();t&&(this.last_token=t.last_token,this.pos=t.pos,this.token=t.token)}},{key:"scan",value:function(){for(var t in this.skipBlank(),this.scanners._dict){var e=this.scanners._dict[t].value;if(this.token=e(this.source.slice(this.pos),this.last_token,this.statements,this.operators),this.token)return this.last_token=this.token,this.pos+=this.token.length,this.token}}}]),t}();e.default=u},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=s(n(10)),u=n(0),a=s(n(1)),o=n(7);function s(t){return t&&t.__esModule?t:{default:t}}var c=function(){function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.scanner=new i.default(e,n),this.expr_parser=new a.default,this.statement_parser=(0,o.build_satements)()}return r(t,[{key:"parse",value:function(t){this.code=t.toUpperCase(),this.scanner.setSource(t),this._nextToken();for(var e=[];this.token.type!=u.token_types.EOF;)e.push(this._parseLine());return e}},{key:"_parseLine",value:function(){var t,e=[];for(this.token.type==u.token_types.DeciamlNum&&(t=this.token.text,this._nextToken());!this._isLineTerminator();)e.push(this._parseStatement()),":"==this.token.text&&this._nextToken();return this._nextToken(),{lineNum:t,statements:e}}},{key:"_parseStatement",value:function(){var t,e,n=[];if(this.token.type==u.token_types.Keyword){if(t=this.token.text,e=this.statement_parser[t]){n=e(this.scanner,this.expr_parser);this.token=this.scanner.token}}else if(this.token.type==u.token_types.Identifier){var r=this.token;if(this._nextToken(),"="==this.token.text){if(t="LET",e=this.statement_parser.LET){n=e(this.scanner,this.expr_parser,r.text);this.token=this.scanner.token}}else this._throwError("Invalid token "+this.token.text)}else this._throwError("Invalid token "+this.token.text);return{statement:t,params:n}}},{key:"_isStatementTerminator",value:function(){return this.token.type==u.token_types.EOS||this.token.type==u.token_types.EOL||this.token.type==u.token_types.EOF}},{key:"_isLineTerminator",value:function(){return this.token.type==u.token_types.EOL||this.token.type==u.token_types.EOF}},{key:"_nextToken",value:function(){this.token=this.scanner.scan()}},{key:"_throwError",value:function(t){throw t}}]),t}();e.default=c},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}();var i=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}return r(t,[{key:"evaluate",value:function(t,e){return this.runtime=e,this._evaluateNode(t)}},{key:"_evaluateNode",value:function(t){if(4==t.type||5==t.type||6==t.type||8==t.type)return t.value;if(t.prefix){if(e=this.runtime.operators.get_uniary(t.operator))return e(this._evaluateNode(t.argument));throw"Invalid Operator "+t.operator}if(t.is_binary){var e,n=this._evaluateNode(t.left),r=this._evaluateNode(t.right);if(e=this.runtime.operators.get_binary(t.operator))return e(n,r);throw"Invalid Operator "+t.operator}if(t.is_array){var i=[],u=!0,a=!1,o=void 0;try{for(var s,c=t.object[Symbol.iterator]();!(u=(s=c.next()).done);u=!0){var l=s.value;i.push(this._evaluateNode(l))}}catch(t){a=!0,o=t}finally{try{!u&&c.return&&c.return()}finally{if(a)throw o}}return i}if(9==t.type)return(f=this.runtime.var_manager.get(t.text))?f.val:void 0;if(15==t.type){var f=this.runtime.var_manager.get(t.object.text),h=this._evaluateNode(t.property);if(f)return f.val[h];throw"Index '"+h+"' out of range"}if(16==t.type){var p=this.runtime.fn_manager.get(t.object.text),y=Array.isArray(t.property)?t.property:[t.property],v=[],d=!0,_=!1,k=void 0;try{for(var m,b=y[Symbol.iterator]();!(d=(m=b.next()).done);d=!0){var g=m.value;v.push(this._evaluateNode(g))}}catch(t){_=!0,k=t}finally{try{!d&&b.return&&b.return()}finally{if(_)throw k}}if(p)return p.apply(void 0,v);throw"Function '"+t.object.text+"' is not defined"}}}]),t}();e.default=i},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}();var i=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.var_types={STR:0,NUM:1,ARR:2},this.builtin={E:{val:Math.E,type:this.var_types.NUM},PI:{val:Math.PI,type:this.var_types.NUM}},this.var_dict=this.builtin}return r(t,[{key:"clear",value:function(){this.var_dict=this.builtin}},{key:"get",value:function(t){return this.var_dict[t]}},{key:"register",value:function(t,e,n){this.var_dict[t]={val:e,type:n}}}]),t}();e.default=i},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};function i(t){if("number"!=typeof t)throw"Number expected but got "+(void 0===t?"undefined":r(t));return t}function u(t){if("string"!=typeof t)throw"String expected but got "+(void 0===t?"undefined":r(t));return t}e.default=function(){var t={};return t.FIX=Math.round,t.INT=Math.floor,t.SGN=Math.sign,t.ABS=Math.abs,t.SQR=Math.sqrt,t.LOG=Math.log,t.EXP=Math.exp,t.SIN=Math.sin,t.SINH=Math.sinh,t.COS=Math.cos,t.COSH=Math.cosh,t.TAN=Math.tan,t.TANH=Math.tanh,t.ATN=Math.atan,t.MIN=Math.min,t.MAX=Math.max,t.RND=Math.random,t.ASC=function(t){return u(t).charCodeAt(0)},t.CHR=function(t){return i(t).charCodeAt(0)},t.STR=function(t){return t.toString()},t.HEX=function(t){return t.toString(16)},t.MATCH=function(t,e){return u(t).match(u(e))},t.LEFT=function(t,e){return u(t).substr(0,i(e))},t.SUBSTR=function(t,e,n){return u(t).substr(i(e),i(n))},t.LEN=function(t){return u(t).length},t}},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=function(t){return t&&t.__esModule?t:{default:t}}(n(14));var u=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.builtin=(0,i.default)(),this.fn_dict=this.builtin}return r(t,[{key:"clear",value:function(){this.fn_dict=this.builtin}},{key:"get",value:function(t){return this.fn_dict[t]}},{key:"register",value:function(t,e){this.fn_dict[t]=e}}]),t}();e.default=u},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=s(n(15)),u=s(n(13)),a=s(n(12)),o=s(n(11));function s(t){return t&&t.__esModule?t:{default:t}}var c=function(){function t(e,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.parser=new o.default(e,n),this.expr_evaluator=new a.default,this.var_manager=new u.default,this.statements=e,this.operators=n,this.fn_manager=new i.default}return r(t,[{key:"execute",value:function(t){var e=this.parser.parse(t);console.log(e);var n=!0,r=!1,i=void 0;try{for(var u,a=e[Symbol.iterator]();!(n=(u=a.next()).done);n=!0){var o=u.value;this._executeLine(o)}}catch(t){r=!0,i=t}finally{try{!n&&a.return&&a.return()}finally{if(r)throw i}}}},{key:"_executeLine",value:function(t){var e=!0,n=!1,r=void 0;try{for(var i,u=t.statements[Symbol.iterator]();!(e=(i=u.next()).done);e=!0){var a=i.value,o=this.statements.get(a.statement);if(!o)throw"Statement "+a.statement+" not registered";o.execute(a,this)}}catch(t){n=!0,r=t}finally{try{!e&&u.return&&u.return()}finally{if(n)throw r}}}}]),t}();e.default=c},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}(),i=o(n(16)),u=o(n(6)),a=o(n(3));function o(t){return t&&t.__esModule?t:{default:t}}var s=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.terminal=e,this.statements=new u.default(this.terminal),this.operators=new a.default,this.runtime=new i.default(this.statements,this.operators)}return r(t,[{key:"execute",value:function(t){this.terminal.clear(),this.runtime.execute(t)}},{key:"version",value:function(){return"0.1"}}]),t}();window.BASIC=s,e.default=s}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,